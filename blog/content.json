{"posts":[{"title":"初入指南","text":"本文仅为准备参与该博客项目的成员提供工作流程与规范上的指导。 简介本博文章以 Markdown 作为主要模板语言，选用 Hexo 框架进行文章解析与静态网页的渲染生成，主题则采用了在 Icarus 主题基础上二次改开得来的 Abyrus。也正因此，项目仓库被分为两部分同时进行维护，其中主题仓库作为博客本体仓库的子模块被引入。 开始如果是第一次接触本项目的话，请先 fork blog 到您个人 github 账号下。然后将 fork 后的仓库 clone 到您本地进行开发： 1git clone --recurse-submodules &lt;fork_url&gt; 注：请务必带上 --recurse-submodules 参数以确保主题模块能够被正常签出 为了使您在本地开发时更方便地与源仓库保持同步，我们建议在本地新增一个远程/上游（upstream）来指向源仓库： 123# 示例默认使用 ssh 链接git remote add upstream git@github.com:Abyssers/blog.gitgit fetch upstream 注：upstream 并非硬性指定名称，可自行修改 然后将源仓库的 main 分支设为您本地开发分支的上游分支： 1git branch --set-upstream-to=upstream/main &lt;local_branch&gt; 注：&lt;local_branch&gt; 默认可选 main 分支 这样以后在执行 git pull 的时候就会直接从上游分支（源仓库的 main 分支）来拉取代码了。但是在设置完上游后，git push 的目标也变成了源仓库，此时便需要将 upstream 的 push 地址修改回为您 fork 仓库的地址： 1git remote set-url --push upstream &lt;fork_url&gt; 期间您可以通过执行 git remote -v 来检查本地所有的上游及其地址信息，如果上述操作设置成功您将看到： 1234origin git@github.com:&lt;your_name&gt;/blog.git (fetch)origin git@github.com:&lt;your_name&gt;/blog.git (push)upstream git@github.com:Abyssers/blog.git (fetch)upstream git@github.com:&lt;your_name&gt;/blog.git (push) 问：为啥不直接改默认上游（origin）的 fetch URL？答：因为 git 不支持，git remote set-url 没有 --fetch 选项，所以只能采用新建源仓库指向的上游继而改其 push URL 的方案。 另外，在后续开发/创作过程中，随着主题模块（子模块）的不断更新，仅仅 git pull 是无法将最新版本的主题文件更新到本地的，但我们所有的主题变更都只在主题仓库进行提交，因此对于博客仓库，您只需要强制拉取最新版本的主题模块覆盖本地： 1git submodule update --init --remote --force 注：您也不必担心在强制更新本地主题后出现与源仓库所引用主题版本不一致的问题，Abyrus 的一切更新将通过 Github Actions 自动为博客仓库发起更新主题模块的 Pull Request 请求，所以只需及时拉取最新代码到本地即可。","link":"/blog/2022-09-21-Newbie-Guide/"},{"title":"Drone持续集成实践，实现自动部署","text":"使用 Drone 实现自动化部署。 背景最近参与了一个项目的开发，我主要负责后端。疯狂的时候，一天 push 了 10 次左右，每 push 一次，我都要走一遍如下流程： 编译 -&gt; 打开 shell -&gt; 登录服务器 -&gt; 上传编译好的程序 -&gt; kill 旧进程 -&gt; 启动新版本的程序 作为一名资深懒狗，当然会去寻找自动化部署的工具。于是发现了Drone。 Drone 简介Drone 是Harness开发的一个现代化持续集成平台，使团队能够使用功能强大的云原生管道引擎自动执行构建、测试和发布工作流。（以上部分来自官网） 网上有许多声音说 Drone 的官方文档写得太烂了，我不敢苟同。只是没有中文版的罢了，按照官方文档部署是完全没有问题的。 Drone 分为两个部分：Server 和 Runners。 Server Drone 主服务，它是一个守护进程应用并且拥有 Web 管理界面。它通过 Webhook 对接 Git Server。解析 Git Repository 根目录下的.drone.yml 文件，并以轮询的形态查找需要执行的 Pipelines，路由并管理 Runners。 RunnersDrone Pipeline 处理执行器，可以部署一份或多份。Drone 拥有多种类型的 Runner（docker、k8s、exe、ssh 等等），可选适合的方式安装。 安装 Server一段废话Drone 可以与许多主流源代码管理系统无缝衔接，受限于篇幅，本文只介绍 Drone 与 Github 的集成。 准备工作创建 OAuth 应用如果不会创建，请认真阅读：在 Github 上创建一个 OAuth 应用，这是 Github 官方文档，比某 SDN 的文章强多了，不服来辩。 注意Authorization callback URL和Homepage URL是如何匹配的，请完全按照这个格式匹配，具体如下图所示。否则会出现可预估但是我不想说的错误。 其中drone.example.com为解析到服务器的域名，可以直接是公网 ip，port是端口，若使用公网 IP 则可以指定端口。 完成后请记住Client ID，生成一个Client secrets并记住（并不是真的叫你记住），后面需要用到。 创建一个共享 Secret创建共享 Secret 以验证 Runners 和 Server 之间的通信。你可以使用openssl生成一个共享密钥。 12openssl rand -hex 16c1007912b7089ed39f88138a5a9a2c12 拉取镜像请确保目标机器上有 Docker 环境，因为 Drone server 是以 Docker 镜像发布的。 1docker pull drone/drone:2 配置Drone server 是用环境变量进行配置的。以下只展示了一部分常用参数，若有需要，请参考完整配置 DRONE_GITHUB_CLIENT_ID（必需）该环境变量的值为在上面步骤生成的 GitHub oauth Client ID。 DRONE_GITHUB_CLIENT_SECRET（必需）该环境变量的值为在上面步骤生成的 GitHub oauth Client Secret。 DRONE_RPC_SECRET（必需）该值为上面步骤生成的共享 secret，用于验证 server 和 runners 之间的 rpc 连接。必须为 server 和 runners 提供相同的 secret。 DRONE_SERVER_HOST（必需）该值为解析到主机的域名或公网 IP，如果使用公网 IP，那么可以添加端口。 DRONE_SERVER_PROTO（必需）此值应设置为 http 或 https。 DRONE_USER_FILTER可选参数，其值应为 GitHub 用户或组织的列表（英文逗号分隔）。注册仅限于此列表中的用户或属于此列表中组织成员的用户。如果未设置此值，则注册将向公众开放。 启动 Server可以使用以下命令启动 Server 容器。容器是通过环境变量配置的。若对 Docker 的启动参数有疑问，请参考docker docs 123456789101112docker run \\ --volume=/var/lib/drone:/data \\ --env=DRONE_GITHUB_CLIENT_ID=your-id \\ --env=DRONE_GITHUB_CLIENT_SECRET=super-duper-secret \\ --env=DRONE_RPC_SECRET=super-duper-secret \\ --env=DRONE_SERVER_HOST=drone.example.com \\ --env=DRONE_SERVER_PROTO=http \\ --publish=80:80 \\ --restart=always \\ --detach=true \\ --name=drone \\ drone/drone:2 浏览器访问DRONE_SERVER_HOST的值，若出现以下界面，那么恭喜你，成功了一半。若失败了，不要气馁，可以参考一下官方文档。 可以尝试一下登录。看是否会出现你的代码仓库。若没有，请检查是否授权。 安装 Runners一些废话Drone runners 轮询 server 以查找要执行的工作负载。不同类型的 runners 针对不同的用例和运行时环境进行了优化。您可以安装一个或多个类型的 runners。本人的需求是：push 代码后，实例自动拉取代码进行编译，kill 旧进程，启动新的程序。所以选择了 exec runner。更多类型请看这里。 下载amd64 架构: 12curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_amd64.tar.gz | tar zxsudo install -t /usr/local/bin drone-runner-exec i386 架构: 12curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_i386.tar.gz | tar zxsudo install -t /usr/local/bin drone-runner-exec 32 位 arm: 12curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_arm.tar.gz | tar zxsudo install -t /usr/local/bin drone-runner-exec 64 位 arm: 12curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_arm64.tar.gz | tar zxsudo install -t /usr/local/bin drone-runner-exec 配置exec runner 通过环境变量配置文件进行配置，以下只介绍常见的配置参数，若有需要请查看完整配置 如果你在上一步中以 root 身份安装 drone-runner-exec，那么配置文件的目录为： 1/etc/drone-runner-exec/config 否则： 1~/.drone-runner-exec/config 请注意，这不是一个 bash 文件。不支持 Bash 语法和 Bash 表达式。 123DRONE_RPC_PROTO=httpDRONE_RPC_HOST=drone.example.comDRONE_RPC_SECRET=super-duper-secret DRONE_RPC_PROTO不想进行说明。 DRONE_RPC_HOST提供了 runners 连接到主机地址处的服务器，以接收要执行的管道。与 server 环境变量的 DRONE_SERVER_HOST 保持一致。 DRONE_RPC_SECRET提供了用于向 Drone server 进行身份验证的共享密钥。与 server 环境变量的 DRONE_RPC_SECRET 保持一致。 安装并启动12drone-runner-exec service installdrone-runner-exec service start 日志问题参考官方文档 pipeline概述pipeline 可帮助您自动执行软件交付过程中的步骤，例如启动代码生成、运行自动化测试以及部署到过渡或生产环境。 pipeline 执行由源代码存储库触发。代码中的更改会触发运行相应 pipeline 的 Drone 的 webhook。 pipeline 是通过将文件（命名应为.drone.yml）放在 git 存储库的根目录中来配置的。yaml 语法设计为易于阅读和富有表现力，以便查看存储库的任何人都可以了解工作流。 示例123456789101112131415161718192021222324252627kind: pipelinetype: execname: nameplatform: os: linux arch: amd64steps: - name: clean commands: - bash clean.sh - name: build commands: - bash build.sh environment: GOOS: linux GOARCH: amd64 GOPROXY: https://goproxy.cn,direct - name: start commands: - start.shtrigger: event: - push 其中trigger可以指定 branch 和 event 等，过滤 Webhook。 效果图：懒狗狂喜。 参考 Drone CI / CD | Drone Drone 概念与答疑","link":"/blog/2022-09-22-DroneBySlanceli/"}],"tags":[{"name":"CI&#x2F;CD","slug":"ci-cd","link":"/blog/tags/ci-cd/"},{"name":"Drone","slug":"drone","link":"/blog/tags/drone/"}],"categories":[{"name":"CI&#x2F;CD","slug":"ci-cd","link":"/blog/categories/ci-cd/"}],"pages":[]}